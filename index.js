require('dotenv').config();
const { Telegraf } = require('telegraf');
const { YooCheckout } = require('@a2seven/yoo-checkout');
const express = require('express');
const crypto = require('crypto');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
const payments = new Map();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YooKassa
const checkout = new YooCheckout({
    shopId: process.env.YOOKASSA_SHOP_ID,
    secretKey: process.env.YOOKASSA_SECRET_KEY
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –ö–µ—à–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
let cachedInviteLink = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
async function getInviteLink() {
    if (!cachedInviteLink) {
        try {
            cachedInviteLink = await bot.telegram.exportChatInviteLink(process.env.CHANNEL_ID);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏:', error);
            throw error;
        }
    }
    return cachedInviteLink;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –Æ–ö–∞—Å—Å—ã
function verifyNotificationSignature(body, signature, secret) {
    const message = `${body.event}.${body.object.id}`;
    const hmac = crypto.createHmac('sha256', secret);
    hmac.update(message);
    const expectedSignature = hmac.digest('hex');
    return signature === expectedSignature;
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
bot.command('start', (ctx) => {
    const userId = ctx.from.id;
    const paymentId = `yk_${Date.now()}`;
    payments.set(paymentId, { userId, status: 'pending' });
    
    ctx.replyWithMarkdown(`
üéâ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–∞–Ω–∞–ª!*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü.

üíé *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:*
‚úîÔ∏è –î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
‚úîÔ∏è –ó–∞–∫—Ä—ã—Ç—ã–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
‚úîÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚úîÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: *100 —Ä—É–±–ª–µ–π*
    `, {
        reply_markup: {
            inline_keyboard: [
                [{ 
                    text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', 
                    callback_data: `init_pay:${paymentId}` 
                }],
                [{ 
                    text: '‚ùì –ü–æ–º–æ—â—å', 
                    url: 'https://t.me/your_support' 
                }]
            ]
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
bot.action(/init_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const paymentData = payments.get(paymentId);
    
    if (!paymentData || paymentData.userId !== ctx.from.id) {
        return ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    try {
        await ctx.editMessageText(`
üîí *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞*

–í—ã –æ—Ñ–æ—Ä–º–ª—è–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:
‚ñ´Ô∏è –°—É–º–º–∞: *100 —Ä—É–±–ª–µ–π*
‚ñ´Ô∏è –°—Ä–æ–∫: *1 –º–µ—Å—è—Ü*
‚ñ´Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: *–ù–µ—Ç*

–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂:
        `, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ 
                        text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É', 
                        callback_data: `confirm_pay:${paymentId}` 
                    }],
                    [{ 
                        text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 
                        callback_data: `cancel_pay:${paymentId}` 
                    }]
                ]
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ init_pay:', error);
        await ctx.answerCbQuery('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
    
    ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
bot.action(/confirm_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const paymentData = payments.get(paymentId);
    
    if (!paymentData || paymentData.userId !== ctx.from.id) {
        return ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    try {
        await ctx.editMessageText(`
üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.
        `, { parse_mode: 'Markdown' });
        
        const createPayload = {
            amount: {
                value: '100.00',
                currency: 'RUB'
            },
            payment_method_data: {
                type: 'bank_card'
            },
            confirmation: {
                type: 'redirect',
                return_url: `https://t.me/${ctx.botInfo.username}`
            },
            description: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.id}`,
            metadata: {
                userId: ctx.from.id,
                paymentId: paymentId,
                username: ctx.from.username || '–Ω–µ—Ç username'
            },
            capture: true
        };
        
        const payment = await checkout.createPayment(createPayload);
        
        payments.set(paymentId, { 
            ...paymentData, 
            yooId: payment.id,
            status: 'waiting_for_capture' 
        });
        
        await ctx.editMessageText(`
üîó *–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã*

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.
        `, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                        url: payment.confirmation.confirmation_url
                    }],
                    [{
                        text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                        callback_data: `check_payment:${paymentId}`
                    }]
                ]
            }
        });
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', err);
        await ctx.editMessageText(`
‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        `, { parse_mode: 'Markdown' });
    }
    
    ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
bot.action(/check_payment:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const paymentData = payments.get(paymentId);
    
    if (!paymentData || paymentData.userId !== ctx.from.id) {
        return ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞');
    }
    
    try {
        await ctx.answerCbQuery('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂...');
        
        const paymentInfo = await checkout.getPayment(paymentData.yooId);
        
        if (paymentInfo.status === 'succeeded') {
            const inviteLink = await getInviteLink();
            
            try {
                await bot.telegram.unbanChatMember(process.env.CHANNEL_ID, ctx.from.id);
            } catch (e) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω:', e.message);
            }
            
            await ctx.editMessageText(`
üéâ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏! –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:

${inviteLink}

üìå *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
            `, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ 
                            text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 
                            url: inviteLink 
                        }],
                        [{ 
                            text: 'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞', 
                            url: 'https://t.me/your_support' 
                        }]
                    ]
                }
            });
            
            payments.set(paymentId, { ...paymentData, status: 'completed' });
            
        } else {
            await ctx.answerCbQuery('‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω', { show_alert: true });
        }
        
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞:', err);
        await ctx.answerCbQuery('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞', { show_alert: true });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞
bot.action(/cancel_pay:(.+)/, async (ctx) => {
    const paymentId = ctx.match[1];
    const paymentData = payments.get(paymentId);
    
    if (paymentData?.yooId) {
        try {
            await checkout.cancelPayment(paymentData.yooId);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞:', err);
        }
    }
    
    payments.delete(paymentId);
    await ctx.editMessageText(`
üóë *–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω*

–í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ‚òÄÔ∏è
    `, { parse_mode: 'Markdown' });
    ctx.answerCbQuery();
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ –Æ–ö–∞—Å—Å—ã
app.post('/yookassa-webhook', async (req, res) => {
    try {
        const signature = req.headers['content-signature'];
        
        if (!verifyNotificationSignature(req.body, signature, process.env.YOOKASSA_SECRET_KEY)) {
            console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
            return res.status(401).send();
        }
        
        const payment = req.body;
        
        if (payment.event === 'payment.succeeded') {
            const paymentId = payment.object.metadata.paymentId;
            const userId = payment.object.metadata.userId;
            const paymentData = payments.get(paymentId);
            
            if (paymentData && paymentData.userId.toString() === userId.toString()) {
                const inviteLink = await getInviteLink();
                
                try {
                    await bot.telegram.unbanChatMember(process.env.CHANNEL_ID, userId);
                } catch (e) {
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω:', e.message);
                }
                
                await bot.telegram.sendMessage(userId, `
üéâ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏! –í–æ—Ç –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:

${inviteLink}

üìå *–í–∞–∂–Ω–æ:* –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!
                `, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ 
                                text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª', 
                                url: inviteLink 
                            }]
                        ]
                    }
                });
                
                payments.set(paymentId, { ...paymentData, status: 'completed' });
            }
        }
        
        res.status(200).send();
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ:', err);
        res.status(500).send();
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));

// Graceful shutdown
process.once('SIGINT', () => {
    bot.stop('SIGINT');
    process.exit();
});

process.once('SIGTERM', () => {
    bot.stop('SIGTERM');
    process.exit();
});